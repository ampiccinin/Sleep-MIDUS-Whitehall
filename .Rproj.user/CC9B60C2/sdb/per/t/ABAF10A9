{
    "contents" : "# remove all elements for a clean start\nrm(list=ls(all=TRUE))\n\n## @knitr LoadData\n# pathFile <- file.path(\"./poster/octomult_021114LA.sav\") # link to the file\n# ds0<-Hmisc::spss.get(pathFile, use.value.labels=TRUE) # imput data object\n# saveRDS(ds0,\"./poster/ds0.rds\")\nds0<-readRDS(\"./poster/ds0.rds\")\n\n## @knitr arrivedsW\nTIvars<-c(\"Case\", \"PairID\", \"TwinID\", \"Zygosity\", \"Female\", \"Educyrs\",\"DemEver\") # Time Invariant (TI)\nTVCompAge <- names(ds0)[grep(\"CompAge\", names(ds0))] # Computed Age\nTVdemtime <- names(ds0)[grep(\"demtime\", names(ds0))] # Dementia\nTVdem <- names(ds0)[grep(\"tvdem\", names(ds0))] # Dementia\nTVepi_e <- names(ds0)[grep(\"epi.e\", names(ds0))] # extraversion\nTVepi_n <- names(ds0)[grep(\"epi.n\", names(ds0))]# Neuroticism\nTVvars <- c(TVCompAge,TVdemtime,TVdem, TVepi_e,TVepi_n) # Time Variant (TV) variables\ndsW <- ds0[, c(TIvars,TVvars)] # arrive at dsW\nhead(dsW)\n\n\n\n## @knitr Melt01\n# Uses dsW as the input\ndsLong <- reshape2::melt(dsW, id.vars=TIvars,na.rm=F) # melt/stack all variables not in id.vars\ndplyr::filter(dsLong, Case == 1) # see data for a single person\nnrow(dsLong)/length(unique(dsLong$Case)) # should be integer\n\n## @knitr processMelted01\ndsLong$time <- stringr::str_sub(dsLong$variable,-1,-1) # Create variable that counts time\ndsLong$time <- as.integer(dsLong$time) # force it to be integer\n# Remove the counter suffix from the values in the columns \"variable\"\nfor (i in 1:5){\n  dsLong$variable <- gsub(pattern=i, replacement='', x=dsLong$variable)\n}\ndplyr::filter(dsLong, Case == 1) # see data for a single person\ndsLong$variable <- gsub(pattern=\"epi.e\", replacement='epiE', x=dsLong$variable)\ndsLong$variable <- gsub(pattern=\"epi.n\", replacement='epiN', x=dsLong$variable)\ndplyr::filter(dsLong, Case == 1) # see data for a single person\n\n## @knitr Cast01\ndsL1 <- reshape2::dcast(dsLong, Case + PairID + TwinID + Zygosity + Female + Educyrs + DemEver + time ~ variable, value.var = \"value\")\ndsL1 <- dplyr::filter(dsL1,time %in% 1:4) # select only these time points\ndplyr::filter(dsL1, Case == 1) # see data for a single person\n\n## @knitr createDummmyDementia\nrequire(dplyr)\ndsL1a <- dsL1 %>% # where ALL demtime values are NA\ngroup_by(Case) %>% filter(demtime=all(is.na(demtime))) %>% \nmutate(dementia = 0)\ndplyr::arrange(dsL1a,Case)\n# dsL1b <- dsL1 %>% # where NONE demtime values are NA\n#   group_by(Case) %>% filter(demtime=all(!is.na(demtime))) %>%\n#   mutate(dementia = 0)\n# dplyr::arrange(dsL1b,Case)\ndsL1c <- dsL1 %>% # where NOT ALL demtime values are NA\n  group_by(Case) %>% filter(demtime=!all(is.na(demtime))) %>%\n  mutate(dementia = 1) \ndplyr::arrange(dsL1c,Case)\ndsL1 <- data.frame(rbind(dsL1a, dsL1c))\ndsL1 <- dplyr::select(dsL1, Case, PairID, TwinID, Zygosity, Female, Educyrs,DemEver, time, CompAge, demtime, tvdem, dementia, epiE, epiN)\ndsL1$dementia <- factor(dsL1$dementia, levels = c(\"0\",\"1\"),labels = c(\"No dementia\",\"Dementia\"))\ndplyr::filter(dsL1, Case == 123) # see data for a single person\n\n\n## @knitr Melt02 \n# Uses dsL1 as the input\ndsLong <- reshape2::melt(dsL1, id.vars=c(TIvars,\"dementia\", \"time\",\"CompAge\",\"demtime\",\"tvdem\"),na.rm=F) # melt/stack all variables not in id.vars\ndplyr::filter(dsLong, Case == 1) # see data for a single person\nnrow(dsLong)/length(unique(dsLong$Case)) # should be integer\n\n## @knitr processMelted02\ndsLong$trait <- factor(stringr::str_sub(dsLong$variable,-1,-1)) # Create dummy indicator for trait\ndplyr::filter(dsLong, Case == 13) # see data for a single person\n\n# dsLong$trait <- gsub(pattern=\"epi\", replacement='', x=dsLong$variable)\ndsLong$trait <- gsub(pattern=\"E\", replacement='Extraversion', x=dsLong$trait)\ndsLong$trait <- gsub(pattern=\"N\", replacement='Neuroticism', x=dsLong$trait)\n\ndplyr::filter(dsLong, Case == 13) # see data for a single person\ndsLong$variable <- \"score\"\ndplyr::filter(dsLong, Case == 13) # see data for a single person\n\n## @knitr Cast02  \ndsL2 <- reshape2::dcast(dsLong, Case + PairID + TwinID + Zygosity + Female + Educyrs + DemEver + dementia  + tvdem + time + CompAge + demtime + trait ~ variable, value.var = \"value\")\ndsL2 <- dplyr::filter(dsL2,time %in% 1:4) %>% # select only these time points\n  dplyr::arrange(Case) # Sorce by case number\ndplyr::filter(dsL2, Case == 13) # see data for a single person\n### For future study : compare the order of trait entering the casting equation.\n# dsL2 <- reshape2::dcast(dsLong, Case + PairID + TwinID + Zygosity + Female + Educyrs + dementia + trait + time + CompAge + demtime  ~ variable, value.var = \"value\")\n# dsL2 <- dplyr::filter(dsL2,time %in% 1:4) # select only these time points\n# dplyr::filter(dsL2, Case == 13) # see data for a single person\n\n\ndsL1$educat[dsL1$Educyrs < 7] <- \"EDU < 7 \"\ndsL1$educat[dsL1$Educyrs == 7] <- \"EDU = 7\"\ndsL1$educat[dsL1$Educyrs > 7] <- \"EDU > 7 \"\n\ndsL2$educat[dsL2$Educyrs < 7] <- \"EDU < 7 \"\ndsL2$educat[dsL2$Educyrs == 7] <- \"EDU = 7\"\ndsL2$educat[dsL2$Educyrs > 7] <- \"EDU > 7 \"\n\n\nfor(i in 1:4){\n  dsL1[dsL1$time==i,\"CompAge1\"] <- dsL1[dsL1$time==1,\"CompAge\"]\n  dsL1[dsL1$time==i,\"tvdem1\"] <- dsL1[dsL1$time==1,\"tvdem\"]\n  dsL1 <- dplyr::mutate(dsL1, Mage = CompAge1 - 83, MEducyrs = Educyrs - 7)\n\n  dsL2[dsL2$time==i,\"CompAge1\"] <- dsL2[dsL2$time==1,\"CompAge\"]\n  dsL2[dsL2$time==i,\"tvdem1\"] <- dsL2[dsL2$time==1,\"tvdem\"]\n  dsL2 <- dplyr::mutate(dsL2, Mage = CompAge1 - 83, MEducyrs = Educyrs - 7)\n}\n\n\ndplyr::filter(dsL1,Case==1)\ndplyr::filter(dsL2,Case==1)\n\n## @knitr  LabelingFactorLevels\n# assign labels to the values of categorical variables\ndsF <- dsL1\nsource(\"./poster/LabelingFactorLevels.R\")\ndsL1 <- dsF\n\ndsF <- dsL2\nsource(\"./poster/LabelingFactorLevels.R\")\ndsL2 <- dsF\n\n\n## @knitr SaveRDS\nsaveRDS(dsL1,\"./poster/dsL1.rds\")\nsaveRDS(dsL2,\"./poster/dsL2.rds\")\n\n## @knitr CleanUp\n\n# length(unique(dsL1$Case))\n# head(dsL1)\n\n\nrm(list=setdiff(ls(),c(\"ds0\",\"dsL1\",\"dsL2\")))\n\n\n\n  \n",
    "created" : 1415053418063.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2487342308",
    "id" : "ABAF10A9",
    "lastKnownWriteTime" : 1415053299,
    "path" : "~/GitHub/Personality-and-Dementia/poster/dsL.R",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}